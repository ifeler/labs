// Программа на C, реализующая игру "ним"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>
// Функция, которая возвращает 1, если текущее состояние кучек является позицией Нима, и 0 в противном случае
int is_nim(int a, int b, int c) {
  return (a ^ b ^ c) == 0;
}

// Функция, которая возвращает оптимальный ход для игрока, если он существует, или случайный ход в противном случае
int optimal_move(int a, int b, int c) {
  // Проверяем все возможные ходы и выбираем тот, который приводит к позиции Нима
  for (int i = 1; i <= a; i++) {
    if (is_nim(a - i, b, c)) {
      return i;
    }
  }
  for (int i = 1; i <= b; i++) {
    if (is_nim(a, b - i, c)) {
      return i;
    }
  }
  for (int i = 1; i <= c; i++) {
    if (is_nim(a, b, c - i)) {
      return i;
    }
  }
  // Если нет оптимального хода, возвращаем случайное число от 1 до минимальной кучки
  int min = a < b ? (a < c ? a : c) : (b < c ? b : c);
  return rand() % min + 1;
}

// Функция, которая выводит на экран текущее состояние кучек
void print_piles(int a, int b, int c) {
  printf("Кучка A: %d\n", a);
  printf("Кучка B: %d\n", b);
  printf("Кучка C: %d\n", c);
}

// Главная функция программы
int main() {
  setlocale(LC_ALL, "Russian");
  // Инициализируем генератор случайных чисел
  srand(time(NULL));
  
  // Задаем начальное состояние кучек
  int a = rand() % 10 + 1;
  int b = rand() % 10 + 1;
  int c = rand() % 10 + 1;

  // Выводим приветственное сообщение и правила игры
  printf("Добро пожаловать в игру \"ним\"!\n");
  printf("В этой игре есть три кучки камней. Вы можете взять любое количество камней из одной кучки за один ход. Выигрывает тот, кто возьмет последний камень.\n");
  
  // Определяем, кто ходит первым: компьютер или человек
  int turn = rand() % 2; // turn = 0 означает ход компьютера, turn = 1 означает ход человека
  
  // Повторяем цикл игры, пока не закончатся камни во всех кучках
  while (a > 0 || b > 0 || c > 0) {
    // Выводим текущее состояние кучек
    print_piles(a, b, c);
    
    // Если ходит компьютер
    if (turn == 0) {
      printf("Ход компьютера.\n");
      // Выбираем оптимальный или случайный ход
      int move = optimal_move(a, b, c);
      // Выбираем кучку, из которой будем брать камни
      int pile = rand() % 3; // pile = 0 означает кучку A, pile = 1 означает кучку B, pile = 2 означает кучку C
      // Проверяем, чтобы в выбранной кучке было достаточно камней для хода
      while ((pile == 0 && move > a) || (pile == 1 && move > b) || (pile == 2 && move > c)) {
        pile = rand() % 3;
      }
      // Уменьшаем количество камней в выбранной кучке на величину хода
      if (pile == 0) {
        a -= move;
        printf("Компьютер взял %d камней из кучки A.\n", move);
      }
      else if (pile == 1) {
        b -= move;
        printf("Компьютер взял %d камней из кучки B.\n", move);
      }
      else {
        c -= move;
        printf("Компьютер взял %d камней из кучки C.\n", move);
      }
    }
    // Если ходит человек
    else {
      printf("Ваш ход.\n");
      // Спрашиваем, из какой кучки и сколько камней он хочет взять
      char pile;
      int move;
      printf("Введите букву кучки (A, B или C) и количество камней, которые вы хотите взять.\n");
      scanf(" %c %d", &pile, &move);
      // Проверяем, чтобы введенные данные были корректными
      while ((pile != 'A' && pile != 'B' && pile != 'C') || (move < 1) || (pile == 'A' && move > a) || (pile == 'B' && move > b) || (pile == 'C' && move > c)) {
        printf("Неверный ввод. Попробуйте еще раз.\n");
        scanf(" %c %d", &pile, &move);
      }
      // Уменьшаем количество камней в выбранной кучке на величину хода
      if (pile == 'A') {
        a -= move;
        printf("Вы взяли %d камней из кучки A.\n", move);
      }
      else if (pile == 'B') {
        b -= move;
        printf("Вы взяли %d камней из кучки B.\n", move);
      }
      else {
        c -= move;
        printf("Вы взяли %d камней из кучки C.\n", move);
      }
    }
    // Меняем очередность хода
    turn = 1 - turn;
  }
  // Выводим сообщение о результате игры
  if (turn == 0) {
    printf("Поздравляем! Вы выиграли!\n");
  }
  else {
    printf("К сожалению, вы проиграли. Попробуйте еще раз!\n");
  }
  return 0;
}
